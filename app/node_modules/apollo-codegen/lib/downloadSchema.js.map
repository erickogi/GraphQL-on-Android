{"version":3,"sources":["../src/downloadSchema.js"],"names":["defaultHeaders","url","outputPath","additionalHeaders","headers","result","response","method","body","json","error","message","errors","schemaData","data","writeFileSync","downloadSchema"],"mappings":";;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;AAMA;;;;AAEA,MAAMA,iBAAiB;AACrB,YAAU,kBADW;AAErB,kBAAgB;AAFK,CAAvB,C,CAdA;;;6CAmBe,WAA8BC,GAA9B,EAAmCC,UAAnC,EAA+CC,iBAA/C,EAAkE;AAC/E,UAAMC,UAAU,sBAAcJ,cAAd,EAA8BG,iBAA9B,CAAhB;;AAEA,QAAIE,MAAJ;AACA,QAAI;AACF,YAAMC,WAAW,MAAM,yBAAML,GAAN,EAAW;AAChCM,gBAAQ,MADwB;AAEhCH,iBAASA,OAFuB;AAGhCI,cAAM,yBAAe,EAAE,sCAAF,EAAf;AAH0B,OAAX,CAAvB;;AAMAH,eAAS,MAAMC,SAASG,IAAT,EAAf;AACD,KARD,CAQE,OAAOC,KAAP,EAAc;AACd,YAAM,sBAAe,oDAAmDA,MAAMC,OAAQ,EAAhF,CAAN;AACD;;AAED,QAAIN,OAAOO,MAAX,EAAmB;AACjB,YAAM,sBAAe,yCAAwCP,OAAOO,MAAO,EAArE,CAAN;AACD;;AAED,UAAMC,aAAaR,MAAnB;AACA,QAAI,CAACQ,WAAWC,IAAhB,EAAsB;AACpB,YAAM,sBAAe,oEAAmE,yBAAeT,MAAf,CAAuB,EAAzG,CAAN;AACD;;AAED,iBAAGU,aAAH,CAAiBb,UAAjB,EAA6B,yBAAeW,UAAf,EAA2B,IAA3B,EAAiC,CAAjC,CAA7B;AACD,G;;WA1B6BG,c;;;;SAAAA,c","file":"downloadSchema.js","sourcesContent":["// Based on https://facebook.github.io/relay/docs/guides-babel-plugin.html#using-other-graphql-implementations\n\nimport fetch from 'node-fetch';\nimport fs from 'fs';\nimport path from 'path';\n\nimport {\n  buildClientSchema,\n  introspectionQuery,\n  printSchema,\n} from 'graphql/utilities';\n\nimport { ToolError } from './errors'\n\nconst defaultHeaders = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json'\n};\n\nexport default async function downloadSchema(url, outputPath, additionalHeaders) {\n  const headers = Object.assign(defaultHeaders, additionalHeaders);\n\n  let result;\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({ 'query': introspectionQuery }),\n    });\n\n    result = await response.json();\n  } catch (error) {\n    throw new ToolError(`Error while fetching introspection query result: ${error.message}`);\n  }\n\n  if (result.errors) {\n    throw new ToolError(`Errors in introspection query result: ${result.errors}`);\n  }\n\n  const schemaData = result;\n  if (!schemaData.data) {\n    throw new ToolError(`No introspection query result data found, server responded with: ${JSON.stringify(result)}`);\n  }\n\n  fs.writeFileSync(outputPath, JSON.stringify(schemaData, null, 2));\n}\n"]}